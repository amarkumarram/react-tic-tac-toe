{"version":3,"sources":["components/FormField.tsx","components/GridCell.tsx","components/Grid.tsx","components/EntryForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormField","props","playerNameHandler","errorObj","submitHandler","className","autoComplete","type","placeholder","onChange","e","name","id","firstPlayerError","secondPlayerError","onClick","GridCell","clickHandler","cellNumber","data-cell","Grid","playerObj","firstPlayerName","secondPlayerName","handleLandOnLogin","useState","clickedCellArr","updateClickedCellArr","resultText","setResultText","elementRef","setElementRef","enableReset","setEnableReset","winnerArr","setWinnerArr","winnerStatus","setWinnerStatus","handleCellClick","cellNum","parseInt","target","getAttribute","isNaN","indexOf","updatedClickedCellArr","clickedCellArrLength","length","innerHTML","cellIndex","tempElementRefArr","useEffect","forEach","el","style","backgroundColor","result","arr","response","decideWinner","filter","index","undefined","disabled","EntryForm","playerName","setPlayerName","errorMsg","setErrorMsg","overallErrorStatus","setOverallErrorStatus","playerNameVal","value","trim","test","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac59f351.chunk.js","sourcesContent":["export function FormField(props: any) {\r\n\r\n    const { playerNameHandler, errorObj, submitHandler } = props;\r\n\r\n    return (\r\n        <div className=\"flexContainer\">\r\n            <form className=\"flexFormContainer\" autoComplete=\"off\">\r\n                <label>First Player Name:</label>\r\n                <input type=\"text\" placeholder=\"Enter first player name\" onChange={(e) => playerNameHandler(e)} name=\"firstPlayerName\" />\r\n                <div id=\"firstPlayerError\" className=\"error\">{errorObj.firstPlayerError}</div>\r\n                <label>Second Player Name:</label>\r\n                <input type=\"text\" placeholder=\"Enter second player name\" onChange={(e) => playerNameHandler(e)} name=\"secondPlayerName\" />\r\n                <div id=\"secondPlayerError\" className=\"error\">{errorObj.secondPlayerError}</div>\r\n                <button type=\"button\" onClick={() => submitHandler()}>Play</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}","export function GridCell(props: any): any {\r\n    const { clickHandler, cellNumber } = props;\r\n\r\n    return (\r\n        <div className=\"gridCell gridCellValue\" onClick={(e) => clickHandler(e)} data-cell={cellNumber} ></div>\r\n    )\r\n}","import { useState, useEffect } from 'react';\r\nimport { GridCell } from './GridCell';\r\n\r\nexport function Grid(props: any) {\r\n    const { firstPlayerName, secondPlayerName } = props.playerObj;\r\n    const { handleLandOnLogin } = props;\r\n\r\n    const [clickedCellArr, updateClickedCellArr] = useState<Array<number>>([]);\r\n    const [resultText, setResultText] = useState<string>(\"\");\r\n    const [elementRef, setElementRef] = useState<Array<any>>([]);\r\n    const [enableReset, setEnableReset] = useState<boolean>(false);\r\n    const [winnerArr, setWinnerArr] = useState<Array<number>>([]);\r\n    const [winnerStatus, setWinnerStatus] = useState<string>(\"\");\r\n\r\n    const decideWinner = (arr: Array<number>): string => {\r\n        let response = \"nothing\";\r\n        if (arr.indexOf(5) != -1) {\r\n            if (arr.indexOf(1) != -1 && arr.indexOf(9) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([1,5,9]);\r\n            } else if (arr.indexOf(2) != -1 && arr.indexOf(8) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([2,5,8]);\r\n            } else if (arr.indexOf(3) != -1 && arr.indexOf(7) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([3,5,7]);\r\n            } else if (arr.indexOf(4) != -1 && arr.indexOf(6) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([4,5,6]);\r\n            }\r\n        }\r\n        if (arr.indexOf(1) != -1 && response == \"nothing\") {\r\n            if (arr.indexOf(2) != -1 && arr.indexOf(3) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([1,2,3]);\r\n            } else if (arr.indexOf(4) != -1 && arr.indexOf(7) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([1,4,7]);\r\n            }\r\n        }\r\n        if (arr.indexOf(9) != -1 && response == \"nothing\") {\r\n            if (arr.indexOf(3) != -1 && arr.indexOf(6) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([3,6,9]);\r\n            } else if (arr.indexOf(7) != -1 && arr.indexOf(8) != -1) {\r\n                response = \"winner\";\r\n                setWinnerArr([7,8,9]);\r\n            }\r\n        }\r\n        if(response == \"nothing\") {\r\n            setWinnerArr([]);\r\n        }\r\n        return response;\r\n    }\r\n\r\n    const handleCellClick = (e: any) => {\r\n        if (resultText == \"\") {\r\n            const cellNum: number = parseInt(e.target.getAttribute(\"data-cell\"));\r\n            if (!isNaN(cellNum) && clickedCellArr.indexOf(cellNum) == -1) {\r\n                const updatedClickedCellArr: Array<number> = [...clickedCellArr, cellNum];\r\n                updateClickedCellArr(updatedClickedCellArr);\r\n                setEnableReset(true);\r\n                const clickedCellArrLength: number = updatedClickedCellArr.length;\r\n                if (clickedCellArrLength % 2 == 0) {\r\n                    e.target.innerHTML = \"<span>o</span>\";\r\n                } else {\r\n                    e.target.innerHTML = \"<span class='cross'>x</span>\";\r\n                }\r\n                const cellIndex = parseInt(e.target.getAttribute(\"data-cell\"));\r\n                const tempElementRefArr = [...elementRef];\r\n                tempElementRefArr[cellIndex] = e.target;\r\n                setElementRef(tempElementRefArr);\r\n            }\r\n        }\r\n    }\r\n\r\n    const resetGame = () => {\r\n        elementRef.forEach(e => {\r\n            if(e != undefined) {\r\n                e.innerHTML = \"\";\r\n                e.style.backgroundColor = \"#ffffff\";\r\n            }\r\n        })\r\n        updateClickedCellArr([]);\r\n        setResultText(\"\");\r\n        setElementRef([]);\r\n        setEnableReset(false);\r\n        setWinnerStatus(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (winnerStatus == \"winner\") {\r\n            clickedCellArr.length % 2 != 0 ? setResultText(`${firstPlayerName} Won!`) : setResultText(`${secondPlayerName} Won!`);\r\n            winnerArr.forEach((el) => {\r\n                elementRef[el].style.backgroundColor = \"#66ffff\";\r\n            })\r\n        } else if (clickedCellArr.length == 9 && winnerStatus == \"nothing\") {\r\n            setResultText(\"Match Draw!\");\r\n        }\r\n    },[winnerArr]);\r\n\r\n    useEffect(() => {\r\n        const clickedCellArrLength: number = clickedCellArr.length;\r\n        if (clickedCellArrLength >= 5) {\r\n            let playerArr: Array<number>;\r\n            //check win-loose-tie\r\n            if (clickedCellArrLength % 2 != 0) {\r\n                //first player\r\n                playerArr = clickedCellArr.filter((el: number, index: number) => {\r\n                    return index % 2 == 0;\r\n                });\r\n            } else {\r\n                //second player\r\n                playerArr = clickedCellArr.filter((el: number, index: number) => {\r\n                    return index % 2 != 0;\r\n                });\r\n            }\r\n            const result: string = decideWinner(playerArr);\r\n            setWinnerStatus(result);\r\n        }\r\n    }, [clickedCellArr]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"grandParentGridContainer\">\r\n                {\r\n                    <div className=\"menuContainer\">\r\n                        <button onClick={() => handleLandOnLogin()}>New Game</button>\r\n                        <button onClick={() => resetGame()} disabled={!enableReset}>Reset</button>\r\n                    </div>\r\n                }\r\n                <div className=\"parentGridContainer\">\r\n                    <div className=\"parentGridCell\">\r\n                        <h2>First Player</h2>\r\n                        <h3>{firstPlayerName}</h3>\r\n                    </div>\r\n                    <div className=\"gridContainer\">\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"1\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"2\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"3\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"4\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"5\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"6\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"7\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"8\" />\r\n                        <GridCell clickHandler={handleCellClick} cellNumber=\"9\" />\r\n                    </div>\r\n                    <div className=\"parentGridCell\">\r\n                        <h2>Second Player</h2>\r\n                        <h3>{secondPlayerName}</h3>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    resultText != \"\" ? <h2 className=\"resultInfo\">{resultText}</h2> :\r\n                        <h2 className=\"turnInfo\">{clickedCellArr.length % 2 == 0 ? firstPlayerName :\r\n                            secondPlayerName}, it's your turn now.</h2>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState } from \"react\";\r\nimport { FormField } from \"./FormField\";\r\nimport { Grid } from \"./Grid\";\r\n\r\nexport function EntryForm() {\r\n\r\n    const [playerName, setPlayerName] = useState<any>({ firstPlayerName: \"\", secondPlayerName: \"\" });\r\n    const [errorMsg, setErrorMsg] = useState<any>({ firstPlayerError: \"\", secondPlayerError: \"\" });\r\n    const [overallErrorStatus, setOverallErrorStatus] = useState<boolean>(false);\r\n\r\n    const handlePlayerName = (e: any) => {\r\n        const playerNameVal: string = e.target.value.trim();\r\n        const playerNameValCheck: boolean = /^[a-z A-Z]+$/.test(playerNameVal);\r\n        if (playerNameValCheck) {\r\n            e.target.name == \"firstPlayerName\" ? setPlayerName({ ...playerName, firstPlayerName: playerNameVal }) :\r\n                setPlayerName({ ...playerName, secondPlayerName: playerNameVal })\r\n            e.target.name == \"firstPlayerName\" ? setErrorMsg({ ...errorMsg, firstPlayerError: \"\" }) :\r\n                setErrorMsg({ ...errorMsg, secondPlayerError: \"\" })\r\n        } else {\r\n            e.target.name == \"firstPlayerName\" ? setErrorMsg({ ...errorMsg, firstPlayerError: \"Please enter valid first player name.\" }) :\r\n                setErrorMsg({ ...errorMsg, secondPlayerError: \"Please enter valid second player name.\" })\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (playerName.firstPlayerName != \"\" && playerName.secondPlayerName != \"\" && errorMsg.firstPlayerError == \"\" && errorMsg.secondPlayerError == \"\") {\r\n            setOverallErrorStatus(true);\r\n        } else {\r\n            if (playerName.firstPlayerName == \"\") {\r\n                setErrorMsg({ ...errorMsg, firstPlayerError: \"Please enter valid first player name.\" })\r\n            } else if (playerName.secondPlayerName == \"\") {\r\n                setErrorMsg({ ...errorMsg, secondPlayerError: \"Please enter valid second player name.\" })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleLandOnLogin = () => {\r\n        setOverallErrorStatus(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                overallErrorStatus ? <Grid playerObj={playerName} handleLandOnLogin={() => handleLandOnLogin()} /> : <FormField playerNameHandler={handlePlayerName} errorObj={errorMsg} submitHandler={handleSubmit} />\r\n            }\r\n        </>\r\n    )\r\n}","import './App.scss';\r\nimport { EntryForm } from './components/EntryForm';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"screenCenter\">\r\n      <EntryForm />\r\n    </div>\r\n  );\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}